# For the ZNP Robin Nano DW v2.2 board:
#   - Compile with the processor model STM32F401.
#   - Select the 32KiB bootloader,
#   - Select (Serial (on # USART1 PA10/PA9) for the communication interface.
#   - Select (Serial (on # USART2 PA3/PA2) if you want to use the serial UART pins on J17 (wifi section)
# Note that the "make flash" command does not work with ZNP Robin boards. After running "make", run the following command:
# cp out/klipper.bin out/ZNP_ROBIN_NANO.bin
#
# Copy the file out/ZNP_ROBIN_NANO.bin to an SD card and then restart the printer with that SD card.
# See docs/Config_Reference.md for a description of parameters.

#[include timelapse.cfg]

[pause_resume]

[display_status]

#####################################################################
# Printer Connection
#####################################################################

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
sensor_temperature1: 25
sensor_adc1: 0.210317
#min_temp: 0
#max_temp: 105

[respond]
default_type: echo
default_prefix: echo:

########################################
# Raspberry PI Connection
########################################

[mcu rpi]
serial: /tmp/klipper_host_mcu

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: -40
max_temp: 85

#####################################################################
# Printer Settings
#####################################################################

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3000
max_z_velocity: 15
max_z_accel: 100
square_corner_velocity: 5

[stepper_x]
step_pin: !PC12
dir_pin: PB3
enable_pin: !PD2
microsteps: 16
rotation_distance: 40
endstop_pin: PA13
position_endstop: -9.0
position_min: -9
position_max: 338
homing_speed: 50

[stepper_y]
step_pin: PC11
dir_pin: PA15
enable_pin: !PC10
microsteps: 16
rotation_distance: 40
endstop_pin: PB8
position_endstop: -1
position_min: -1
position_max: 329
homing_speed: 50

[stepper_z]
step_pin: PC7
dir_pin: !PC9
enable_pin: !PC8
microsteps: 16
rotation_distance: 8
position_min: -2
position_max: 400
endstop_pin: probe:z_virtual_endstop # Use Z- as endstop
homing_speed: 8
homing_retract_dist: 5
second_homing_speed: 3

[extruder]
step_pin: PB10
dir_pin: PB1
enable_pin: !PC6
microsteps: 16
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA6
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 0
max_temp: 250
rotation_distance: 7.453
max_extrude_only_distance: 300
max_extrude_cross_section: 2
[input_shaper]
# Calibrate IS: https://www.klipper3d.org/Resonance_Compensation.html
shaper_type_y = mzv
shaper_freq_y = 48.0
shaper_type_x = ei
shaper_freq_x = 65.45

[heater_bed]
heater_pin: PA5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
pwm_cycle_time: 0.020 # set to 0.0166 if your grid runs on 60Hz to fix lights flickering
max_temp: 110
min_temp: 0

[heater_fan hotend_fan]
pin: PB0
heater: extruder
heater_temp: 50.0

[fan]
pin: PA7
hardware_pwm: False
kick_start_time: 0.1
cycle_time: 0.000095

[force_move]
enable_force_move: True


#####################################################################
# 	Probe
#####################################################################

[probe]
pin: ^PA8
speed: 5
lift_speed: 2.5
samples: 3
samples_result: average
samples_tolerance: 0.100
samples_tolerance_retries: 10
x_offset: -28.5
y_offset: 22

[bed_mesh]
speed: 200
horizontal_move_z: 2
mesh_min: 22,22
mesh_max: 290,315
zero_reference_position: 189.25, 144.55
mesh_pps: 0, 0
probe_count: 11,11
fade_start: 1.0
fade_end: 10.0
algorithm: bicubic

[bed_screws]
screw1: 66, 10.5
screw2: 66, 143
screw3: 66, 270.5
screw4: 321, 10.5
screw5: 321, 143
screw6: 321, 270.5

[screws_tilt_adjust]
screw1: 189.25, 144.55
screw1_name: middle virtual screw
screw2: 66, 10.5
screw2_name: left front screw
screw3: 66, 143
screw3_name: left middle screw
screw4: 66, 270.5
screw4_name: left back screw
screw5: 321, 10.5
screw5_name: right front screw
screw6: 321, 143
screw6_name: right middle screw
screw7: 321, 270.5
screw7_name: right back screw

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 85

####################################################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[safe_z_home]
home_xy_position: 189.25, 144.55
z_hop: 10

[idle_timeout]
timeout: 3600
gcode:
  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Extruder powered down on idle timeout.")}
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{
      printer[printer.toolhead.extruder].target}"
    M104 S0; Turn off extruder but leave the bed on.
  {% else %}
    M104 S0; Turn off extruder but leave the bed on.
    M84 E
  {% endif %}

########################################
# TMC UART configuration
########################################

[virtual_sdcard]
path: /home/michel/printer_data/gcodes
on_error_gcode: 
    # test OK
    G91
    G1 Z25 F900
    G90
    TURN_OFF_HEATERS
    M106 S100
    M84 X Y E
    M300 P10000 S1
    G4 P300
    M300
    M300
    M300
    M300
    M300
    M300
    M300
    M300
    M300
    M300
    M300

[gcode_macro G29]
gcode:
      M400
      BED_MESH_CLEAR
      G28
      BED_MESH_CALIBRATE profile=plus
      BED_MESH_PROFILE LOAD=plus
      M400
      G4 P2000
      G91 
      G1 Z5 F300 
      G90
      G28 Z
      G1 X165 Y165 F12000
      G1 Z0 F300
      
[force_move]
enable_force_move : true

########################################
# PRINT_START/CANCEL_PRINT/PAUSE/RESUME/filament_switch_sensor
########################################

[gcode_macro PRINT_START]         
gcode:
      # Parameters
      {% set BED_TEMP = params.BED|int %}
      {% set EXTRUDER_TEMP = params.HOTEND|int %}
      # Use absolute coordinates 
      G90
      # Home the printer 
	  G28
      # Reset extruder
	  G92 E0
      # Heat the bed
      # Enable if you like to update mesh for each print
      # M104 S{EXTRUDER_TEMP} ; Set temporary lower nozzle temp to prevent oozing during homing and auto bed leveling
      # M190 S{BED_TEMP} ; set first layer bed temp
      # probe the bed and load mesh
      # BED_MESH_CALIBRATE profile=plus
      # LOAD Neptune 3 Plus Mesh
      BED_MESH_PROFILE LOAD=plus
      # Move to wait position
      G1 Z4.0 F3000 ;Move Z Axis up
      G92 E0 ;Reset Extruder
      G1 X115 Y0.5 Z0.4 F3000 ;Move to start position
      # Start to heat the nozzle and bed
      M104 S{EXTRUDER_TEMP}
      M190 S{BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      G1 X215.0 E30 F300 ;Draw the first line
      G1 Z0.6 F120.0 ;Move to side a little
      G1 X210 F3000
      # Reset extruder
      G92 E0
      # Move up a bit
      G1 Z2.0 F3000 ;Move Z Axis up
    M117 Printing

[gcode_macro PRINT_END]
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    RUN_SHELL_COMMAND CMD=clear_plr
    clear_last_file
    {% set RUN_VELOCITY = printer.configfile.settings['printer'].max_velocity|float %}
    {% set RUN_ACCEL    = printer.configfile.settings['printer'].max_accel|float %}
    {% set RUN_DECEL    = printer.configfile.settings['printer'].max_accel_to_decel|float %}
    SET_VELOCITY_LIMIT VELOCITY={RUN_VELOCITY} ACCEL={RUN_ACCEL} ACCEL_TO_DECEL={RUN_DECEL}

    M220 S100
    M221 S100
    {% set z = params.Z|default(100)|int %}
    {% if (printer.gcode_move.position.z+5) < z %}   #If the current gcode-Z position is less than the maximum limit position
      G90 							            ; absolute positioning
      G1 Z{z+5} F6000 				      ; park nozzle at rear
    {% endif %}
    TURN_OFF_HEATERS
    M107
    M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: PB4

#####################################################################
# LED Control
#####################################################################

[led top_led]
white_pin: PB9
initial_white: 1.0

[gcode_move]

[gcode_arcs]

# z_offset = 1.315 //PEI
# z_offset = 1.050 //SOLID

[exclude_object]
# must be disabled for Sonic Pad

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.070
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 28.065
#*# pid_ki = 1.613
#*# pid_kd = 122.084
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 69.361
#*# pid_ki = 0.866
#*# pid_kd = 1388.947
#*#
#*# [bed_mesh plus]
#*# version = 1
#*# points =
#*# 	  -0.027472, -0.027472, -0.049972, -0.091639, -0.109972, -0.099972, -0.076639, -0.059139, -0.031639, 0.010861, 0.012528
#*# 	  -0.007472, -0.004972, -0.017472, -0.063305, -0.089139, -0.080805, -0.078305, -0.071639, -0.051639, -0.019972, -0.000805
#*# 	  -0.005805, 0.010028, 0.002528, -0.027472, -0.054972, -0.058305, -0.056639, -0.053305, -0.049972, -0.029972, -0.009972
#*# 	  0.018361, 0.038361, 0.036695, 0.008361, -0.009972, -0.009972, -0.021639, -0.019972, -0.022472, -0.018305, -0.009139
#*# 	  0.001695, 0.024195, 0.040028, 0.022528, 0.004195, 0.006695, -0.004972, -0.002472, -0.004139, -0.000805, 0.022528
#*# 	  0.023361, 0.043361, 0.045028, 0.024195, 0.014195, 0.016695, 0.018361, 0.023361, 0.025028, 0.031695, 0.029195
#*# 	  0.024195, 0.045861, 0.061695, 0.036695, 0.022528, 0.023361, 0.023361, 0.026695, 0.032528, 0.050861, 0.059195
#*# 	  0.064195, 0.087528, 0.067528, 0.036695, 0.015861, 0.015028, 0.020861, 0.019195, 0.028361, 0.036695, 0.042528
#*# 	  0.049195, 0.058361, 0.045028, 0.015861, -0.015805, -0.022472, -0.025805, -0.029972, -0.023305, 0.002528, 0.025028
#*# 	  0.055861, 0.053361, 0.018361, -0.016639, -0.048305, -0.050805, -0.037472, -0.028305, -0.013305, 0.006695, 0.030028
#*# 	  0.118361, 0.095861, 0.049195, 0.000028, -0.022472, -0.037472, -0.035805, -0.024972, 0.008361, 0.046695, 0.075861
#*# x_count = 11
#*# y_count = 11
#*# mesh_x_pps = 0
#*# mesh_y_pps = 0
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 22.0
#*# max_x = 290.0
#*# min_y = 22.0
#*# max_y = 315.0
